---
import { cards } from "../data/cards";
import { weekRanges } from "../data/weekRanges";
import "../styles/global.css";

const today = new Date();
const year = today.getFullYear();
const isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;

function getCardForDate(date: Date) {
  const isLeapDay =
    isLeapYear && date.getMonth() === 1 && date.getDate() === 29;
  const isDec31 = date.getMonth() === 11 && date.getDate() === 31;

  // Find the current week
  let currentWeekData = null;
  for (const weekRange of weekRanges) {
    const weekStartDate = new Date(
      year,
      weekRange.start.month,
      weekRange.start.day
    );
    const weekEndDate = new Date(year, weekRange.end.month, weekRange.end.day);
    if (date >= weekStartDate && date <= weekEndDate) {
      currentWeekData = weekRange;
      break;
    }
  }

  if (!currentWeekData) {
    currentWeekData = weekRanges[51]; // fallback to week 52
  }

  const cardIndex = currentWeekData.weekNumber - 1;
  const weekStart = new Date(
    year,
    currentWeekData.start.month,
    currentWeekData.start.day
  );
  const weekEnd = new Date(
    year,
    currentWeekData.end.month,
    currentWeekData.end.day
  );

  if (isLeapDay) {
    return {
      name: "Joker",
      isJoker: true,
      rank: "J",
      suitSymbol: "♛",
      color: "red",
      weekNumber: 9,
      weekStart,
      weekEnd,
      isLeapDay: true,
    };
  }

  if (isDec31) {
    return {
      name: "Joker",
      isJoker: true,
      rank: "J",
      suitSymbol: "♛",
      color: "black",
      weekNumber: 52,
      weekStart,
      weekEnd,
      isLeapDay: false,
    };
  }

  return {
    ...cards[cardIndex],
    weekNumber: currentWeekData.weekNumber,
    isJoker: false,
    isLeapDay: false,
    weekStart,
    weekEnd,
  };
}

const card = getCardForDate(today);

const dayName = today.toLocaleDateString("en-GB", { weekday: "short" });
const dateDisplay = today.toLocaleDateString("en-GB", {
  day: "2-digit",
  month: "short",
});

const fixedWeekDays = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];

interface DayInfo {
  label: string;
  dateNum: string;
  inRange: boolean;
  isToday: boolean;
}

function seededRandom(seed: number, min: number, max: number) {
  const x = Math.sin(seed) * 10000;
  const rand = x - Math.floor(x);
  return Math.floor(rand * (max - min + 1)) + min;
}

// === Week Grid Setup ===
let weekGrid: DayInfo[] = [];

const isJoker = card.isJoker;
const isLeapDay = card.isLeapDay;

let weekNumberPart = "";
let weekRangePart = "";

const startDate = new Date(card.weekStart);
startDate.setDate(startDate.getDate() - startDate.getDay());

for (let i = 0; i < 21; i++) {
  const day = new Date(startDate);
  day.setDate(startDate.getDate() + i);

  const inRange = day >= card.weekStart && day <= card.weekEnd;
  const isToday = day.toDateString() === today.toDateString();

  weekGrid.push({
    label: fixedWeekDays[day.getDay()],
    dateNum: String(day.getDate()).padStart(2, "0"),
    inRange,
    isToday,
  });
}

if (isJoker) {
  const labelDate = today.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  });
  weekNumberPart = `Joker: ${labelDate}`;
  weekRangePart = "";
} else {
  weekNumberPart = `Week ${card.weekNumber} / 52`;
  weekRangePart = `${card.weekStart.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  })} – ${card.weekEnd.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  })}`;
}

// === Fan Cards ===
const fanSize = 13;
const halfFan = Math.floor(fanSize / 2);
const currentIndex = (card.weekNumber ?? 1) - 1;

let startIdx = currentIndex - halfFan;
let endIdx = currentIndex + halfFan;
const totalCards = 52;

if (startIdx < 0) {
  endIdx += -startIdx;
  startIdx = 0;
}
if (endIdx > totalCards - 1) {
  startIdx -= endIdx - (totalCards - 1);
  endIdx = totalCards - 1;
  if (startIdx < 0) startIdx = 0;
}

const fanCards = cards.slice(startIdx, endIdx + 1);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Poker Calendar</title>
    <meta
      http-equiv="Cache-Control"
      content="no-store, no-cache, must-revalidate"
    />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
  </head>
  <body>
    <main class="centered">
      <div class="clock">
        <div class="date">{dayName} {dateDisplay}</div>
        <div id="time" class="time">-- --</div>
      </div>

      <div class="cal">
        <div class="week-number">
          <strong>{weekNumberPart}</strong>
          {isJoker ? "" : ": "}
          <span class="week-range">{weekRangePart}</span>
        </div>

        <div class="week-grid">
          {
            weekGrid.slice(0, 7).map((day) => {
              const isWeekend = day.label === "sun" || day.label === "sat";
              return (
                <div
                  class={`week-cell week-label ${isWeekend ? "weekend" : ""}`}
                >
                  {day.label}
                </div>
              );
            })
          }
          {
            weekGrid.map((day) => (
              <div
                class={`week-cell ${!day.inRange ? "out-of-range" : ""} ${day.isToday ? "today" : ""}`}
              >
                {day.dateNum}
              </div>
            ))
          }
        </div>
      </div>

      <div class="card-fan-display">
        <div
          class="card-fan"
          style="display: grid; grid-template-columns: repeat(13, 60px); gap: 0.5rem; justify-content: center; margin-top: 1rem;"
        >
          {
            fanCards.map((c, i) => {
              const isCurrent = startIdx + i === currentIndex;
              const relativePos = i - halfFan;
              const seed = startIdx + i;
              const rotationDegree = seededRandom(seed, 1, 5);
              const rotation =
                relativePos < 0 ? -rotationDegree : rotationDegree;

              const isJokerCard = isCurrent && card.isJoker;

              return (
                <div
                  class={`card ${isCurrent ? "current" : ""}`}
                  style={`transform: ${isCurrent ? "translateY(-50px)" : `rotate(${rotation}deg)`}; transition: transform 0.3s ease;`}
                >
                  <div class="card-corner">
                    <div class="card-rank">{isJokerCard ? "J" : c.rank}</div>
                    <div
                      class={`card-suit-symbol ${
                        isJokerCard ? card.color : c.suit?.toLowerCase()
                      }`}
                    >
                      {isJokerCard ? "♛" : c.suitSymbol}
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </main>

    <script is:inline>
      function updateClock() {
        const now = new Date();
        const h = String(now.getHours()).padStart(2, "0");
        const m = String(now.getMinutes()).padStart(2, "0");
        const timeEl = document.getElementById("time");
        if (timeEl) {
          timeEl.textContent = h + ":" + m;
        }
      }
      updateClock();
      setInterval(updateClock, 10_000);
    </script>
  </body>
</html>
