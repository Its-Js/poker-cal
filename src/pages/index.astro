---
import { getCardForDate } from "../utils/getCardForDate";
import "../styles/global.css";

const today = new Date();
const card = getCardForDate(today);

const dayName = today.toLocaleDateString("en-GB", { weekday: "short" });
const dateDisplay = today.toLocaleDateString("en-GB", {
  day: "2-digit",
  month: "short",
});

let weekNumberPart = "";
const fixedWeekDays = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];

interface DayInfo {
  label: string;
  dateNum: string;
  inRange: boolean;
  isToday: boolean;
}

let weekGrid: DayInfo[] = [];

if (card.weekStart && card.weekEnd && card.weekNumber) {
  weekNumberPart = `Week ${card.weekNumber} / 52`;

  const startDate = new Date(card.weekStart);
  startDate.setDate(startDate.getDate() - startDate.getDay()); // go to Sunday

  for (let i = 0; i < 14; i++) {
    const day = new Date(startDate);
    day.setDate(startDate.getDate() + i);

    const inRange = day >= card.weekStart && day <= card.weekEnd;
    const isToday = day.toDateString() === today.toDateString();

    weekGrid.push({
      label: fixedWeekDays[day.getDay()],
      dateNum: String(day.getDate()).padStart(2, "0"),
      inRange,
      isToday,
    });
  }
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Poker Calendar</title>
    <style>
      .week-grid {
        display: grid;
        grid-template-columns: repeat(7, 2.5rem);
        gap: 0.5rem;
        justify-content: center;
        margin-top: 0.5rem;
        font-family: monospace;
        text-align: center;
      }

      .week-cell {
        border: 1px solid #ccc;
        border-radius: 0.25rem;
        padding: 0.25rem 0;
        font-weight: 600;
        color: #555;
        user-select: none;
      }

      .week-cell.out-of-range {
        color: #bbb;
        border-color: #eee;
      }

      .week-cell.today {
        color: #c00;
        font-weight: 700;
        border-color: #c00;
      }

      .week-label {
        font-size: 0.75rem;
        text-transform: uppercase;
      }

      .week-number {
        font-size: 1.25rem;
        margin-bottom: 0.25rem;
      }
    </style>
  </head>
  <body>
    <main class="centered">
      <div class="clock">
        <div class="date">{dayName} {dateDisplay}</div>
        <div id="time" class="time">-- --</div>
      </div>

      <div class="cal">
        <div class="week-number"><strong>{weekNumberPart}</strong></div>

        <div class="week-grid">
          {
            weekGrid
              .slice(0, 7)
              .map((day) => <div class="week-cell week-label">{day.label}</div>)
          }
          {
            weekGrid.map((day) => (
              <div
                class={`week-cell ${!day.inRange ? "out-of-range" : ""} ${day.isToday ? "today" : ""}`}
              >
                {day.dateNum}
              </div>
            ))
          }
        </div>
      </div>

      <div class="card-suit">
        {card.rank} of {card.suit}
        <span class={`suit ${card.suit?.toLowerCase()}`}>{card.suitSymbol}</span
        >
      </div>
    </main>

    <script is:inline>
      function updateClock() {
        const now = new Date();
        const h = String(now.getHours()).padStart(2, "0");
        const m = String(now.getMinutes()).padStart(2, "0");
        const timeEl = document.getElementById("time");
        if (timeEl) {
          timeEl.textContent = h + ":" + m;
        }
      }

      updateClock();
      setInterval(updateClock, 10_000);
    </script>
  </body>
</html>
