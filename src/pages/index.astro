---
import { getCardForDate } from "../utils/getCardForDate";
import { cards } from "../data/cards";
import "../styles/global.css";

const today = new Date();

// Leap year logic
function isLeapYear(year: number): boolean {
  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}
const leapYear = isLeapYear(today.getFullYear());

// Total cards based on year
const totalCards = leapYear ? 54 : 53;

const card = getCardForDate(today);

const dayName = today.toLocaleDateString("en-GB", { weekday: "short" });
const dateDisplay = today.toLocaleDateString("en-GB", {
  day: "2-digit",
  month: "short",
});

const fixedWeekDays = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];

interface DayInfo {
  label: string;
  dateNum: string;
  inRange: boolean;
  isToday: boolean;
}

function seededRandom(seed: number, min: number, max: number) {
  const x = Math.sin(seed) * 10000;
  const rand = x - Math.floor(x);
  return Math.floor(rand * (max - min + 1)) + min;
}

let weekGrid: DayInfo[] = [];
let weekNumberPart = "";
let weekRangePart = "";

const fanSize = 13;
const halfFan = Math.floor(fanSize / 2);

let currentIndex = 0;
let startIdx = 0;
let endIdx = 0;

// Detect special Joker dates
const isSpecialDate =
  (leapYear &&
    today.getMonth() === 11 &&
    (today.getDate() === 30 || today.getDate() === 31)) ||
  (today.getDate() === 29 && today.getMonth() === 1);

// Set correct Joker index
const jokerIndex =
  leapYear && today.getMonth() === 11 && today.getDate() === 30
    ? totalCards - 2
    : totalCards - 1;

const isJokerDay =
  card.isJoker === true ||
  (leapYear &&
    today.getMonth() === 11 &&
    (today.getDate() === 30 || today.getDate() === 31));

if (isJokerDay) {
  weekNumberPart = "Joker Day";

  const startDate = new Date(today);
  startDate.setDate(today.getDate() - today.getDay());

  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 20);

  weekRangePart = today.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  });

  for (let i = 0; i < 21; i++) {
    const day = new Date(startDate);
    day.setDate(startDate.getDate() + i);

    const inRange = day.toDateString() === today.toDateString();
    const isToday = day.toDateString() === today.toDateString();

    weekGrid.push({
      label: fixedWeekDays[day.getDay()],
      dateNum: String(day.getDate()).padStart(2, "0"),
      inRange,
      isToday,
    });
  }

  currentIndex = jokerIndex;

  startIdx = currentIndex - halfFan;
  endIdx = currentIndex + halfFan;

  if (startIdx < 0) {
    endIdx += -startIdx;
    startIdx = 0;
  }
  if (endIdx > totalCards - 1) {
    startIdx -= endIdx - (totalCards - 1);
    endIdx = totalCards - 1;
    if (startIdx < 0) startIdx = 0;
  }
} else if (card.weekStart && card.weekEnd && card.weekNumber) {
  weekNumberPart = `Week ${card.weekNumber} / 52`;

  const startDate = new Date(card.weekStart);
  startDate.setDate(startDate.getDate() - startDate.getDay());

  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 20);

  weekRangePart = `${card.weekStart.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  })} – ${card.weekEnd.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  })}`;

  for (let i = 0; i < 21; i++) {
    const day = new Date(startDate);
    day.setDate(startDate.getDate() + i);

    const inRange = day >= card.weekStart && day <= card.weekEnd;
    const isToday = day.toDateString() === today.toDateString();

    weekGrid.push({
      label: fixedWeekDays[day.getDay()],
      dateNum: String(day.getDate()).padStart(2, "0"),
      inRange,
      isToday,
    });
  }

  currentIndex = (card.weekNumber ?? 1) - 1;

  startIdx = currentIndex - halfFan;
  endIdx = currentIndex + halfFan;

  if (startIdx < 0) {
    endIdx += -startIdx;
    startIdx = 0;
  }
  if (endIdx > totalCards - 1) {
    startIdx -= endIdx - (totalCards - 1);
    endIdx = totalCards - 1;
    if (startIdx < 0) startIdx = 0;
  }
} else {
  weekNumberPart = "No Week Info";

  const startDate = new Date(today);
  startDate.setDate(today.getDate() - today.getDay());

  for (let i = 0; i < 21; i++) {
    const day = new Date(startDate);
    day.setDate(startDate.getDate() + i);
    const isToday = day.toDateString() === today.toDateString();

    weekGrid.push({
      label: fixedWeekDays[day.getDay()],
      dateNum: String(day.getDate()).padStart(2, "0"),
      inRange: false,
      isToday,
    });
  }

  currentIndex = 0;
  startIdx = 0;
  endIdx = Math.min(fanSize - 1, totalCards - 1);
}

// === Fan Card Display ===

let fanCards: typeof cards = [];

if (isSpecialDate) {
  currentIndex = jokerIndex;

  const fanRangeCards = cards.slice(startIdx, endIdx + 1);
  const relativeCurrent = currentIndex - startIdx;

  if (relativeCurrent >= 0 && relativeCurrent < fanRangeCards.length) {
    const shiftedCards = [];

    for (let i = 1; i < relativeCurrent; i++) {
      shiftedCards.push(fanRangeCards[i]);
    }

    shiftedCards.push(cards[jokerIndex]);

    for (let i = relativeCurrent + 1; i < fanRangeCards.length; i++) {
      shiftedCards.push(fanRangeCards[i]);
    }

    while (shiftedCards.length < fanRangeCards.length) {
      let nextCardIndex: number;
      nextCardIndex = endIdx + (shiftedCards.length - fanRangeCards.length) + 1;

      if (nextCardIndex < totalCards) {
        shiftedCards.push(cards[nextCardIndex]);
      } else {
        break;
      }
    }

    fanCards = shiftedCards;
  } else {
    fanCards = cards.slice(startIdx, endIdx + 1);
    if (
      currentIndex - startIdx >= 0 &&
      currentIndex - startIdx < fanCards.length
    ) {
      fanCards[currentIndex - startIdx] = cards[jokerIndex];
    }
  }
} else {
  fanCards = cards.slice(startIdx, endIdx + 1);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Poker Calendar</title>
  </head>
  <body>
    <main class="centered">
      <div class="clock">
        <div class="date">{dayName} {dateDisplay}</div>
        <div id="time" class="time">-- --</div>
      </div>

      <div class="cal">
        <div class="week-number">
          <strong>{weekNumberPart}</strong>: <span class="week-range"
            >{weekRangePart}</span
          >
        </div>

        <div class="week-grid">
          {
            weekGrid.slice(0, 7).map((day) => {
              const isWeekend = day.label === "sun" || day.label === "sat";
              return (
                <div
                  class={`week-cell week-label ${isWeekend ? "weekend" : ""}`}
                >
                  {day.label}
                </div>
              );
            })
          }
          {
            weekGrid.map((day) => (
              <div
                class={`week-cell ${!day.inRange ? "out-of-range" : ""} ${day.isToday ? "today" : ""}`}
              >
                {day.dateNum}
              </div>
            ))
          }
        </div>
      </div>

      <div class="card-fan-display">
        <div
          class="card-fan"
          style="display: grid; grid-template-columns: repeat(13, 60px); gap: 0.5rem; justify-content: center; margin-top: 1rem;"
        >
          {
            fanCards.map((c, i) => {
              const isCurrent = startIdx + i === currentIndex;
              const relativePos = i - halfFan;

              if (isCurrent) {
                return (
                  <div
                    class="card current"
                    style="transform: translateY(-50px); transition: transform 0.3s ease;"
                  >
                    <div class="card-corner">
                      <div class="card-rank">
                        {c.rank === "JOKER" ? "J" : c.rank}
                      </div>
                      <div
                        class={`card-suit-symbol ${c.rank === "JOKER" ? "joker" : c.suit?.toLowerCase()}`}
                      >
                        {c.rank === "JOKER" ? "♛" : c.suitSymbol}
                      </div>
                    </div>
                  </div>
                );
              }

              const seed = startIdx + i;
              const rotationDegree = seededRandom(seed, 1, 5);
              const rotation =
                relativePos < 0 ? -rotationDegree : rotationDegree;

              return (
                <div
                  class="card"
                  style={`transform: rotate(${rotation}deg); transition: transform 0.3s ease;`}
                >
                  <div class="card-corner">
                    <div class="card-rank">{c.rank}</div>
                    <div
                      class={`card-suit-symbol ${c.rank === "JOKER" ? "joker" : c.suit?.toLowerCase()}`}
                    >
                      {c.rank === "JOKER" ? "♛" : c.suitSymbol}
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </main>

    <script is:inline>
      function updateClock() {
        const now = new Date();
        const h = String(now.getHours()).padStart(2, "0");
        const m = String(now.getMinutes()).padStart(2, "0");
        const timeEl = document.getElementById("time");
        if (timeEl) {
          timeEl.textContent = h + ":" + m;
        }
      }
      updateClock();
      setInterval(updateClock, 10_000);
    </script>
  </body>
</html>
