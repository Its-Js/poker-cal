---
import { getCardForDate } from "../utils/getCardForDate";
import { cards } from "../data/cards";
import "../styles/global.css";

const today = new Date();
const card = getCardForDate(today);

const dayName = today.toLocaleDateString("en-GB", { weekday: "short" });
const dateDisplay = today.toLocaleDateString("en-GB", {
  day: "2-digit",
  month: "short",
});

const fixedWeekDays = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];

interface DayInfo {
  label: string;
  dateNum: string;
  inRange: boolean;
  isToday: boolean;
}

let weekGrid: DayInfo[] = [];
let weekNumberPart = "";
let weekRangePart = "";

if (card.weekStart && card.weekEnd && card.weekNumber) {
  weekNumberPart = `Week ${card.weekNumber} / 52`;

  const startDate = new Date(card.weekStart);
  startDate.setDate(startDate.getDate() - startDate.getDay()); // Sunday before or on weekStart

  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 20); // 21 days total

  weekRangePart = `${card.weekStart.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  })} â€“ ${card.weekEnd.toLocaleDateString("en-GB", {
    day: "2-digit",
    month: "short",
  })}`;

  for (let i = 0; i < 21; i++) {
    const day = new Date(startDate);
    day.setDate(startDate.getDate() + i);

    const inRange = day >= card.weekStart && day <= card.weekEnd;
    const isToday = day.toDateString() === today.toDateString();

    weekGrid.push({
      label: fixedWeekDays[day.getDay()],
      dateNum: String(day.getDate()).padStart(2, "0"),
      inRange,
      isToday,
    });
  }
}

// Prepare 13-card fan centered on current card
const totalCards = cards.length; // 52
const fanSize = 13;
const halfFan = Math.floor(fanSize / 2);
const currentIndex = (card.weekNumber ?? 1) - 1; // zero-based index

// Calculate start and end indices for the fan slice, handling edges
let startIdx = currentIndex - halfFan;
let endIdx = currentIndex + halfFan;

if (startIdx < 0) {
  endIdx += -startIdx; // shift forward
  startIdx = 0;
}
if (endIdx > totalCards - 1) {
  startIdx -= endIdx - (totalCards - 1); // shift backward
  endIdx = totalCards - 1;
  if (startIdx < 0) startIdx = 0;
}

const fanCards = cards.slice(startIdx, endIdx + 1);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Poker Calendar</title>
  </head>
  <body>
    <main class="centered">
      <div class="clock">
        <div class="date">{dayName} {dateDisplay}</div>
        <div id="time" class="time">-- --</div>
      </div>

      <div class="cal">
        <div class="week-number">
          <strong>{weekNumberPart}</strong>: <span class="week-range"
            >{weekRangePart}</span
          >
        </div>

        <div class="week-grid">
          {
            weekGrid.slice(0, 7).map((day) => {
              const isWeekend = day.label === "sun" || day.label === "sat";
              return (
                <div
                  class={`week-cell week-label ${isWeekend ? "weekend" : ""}`}
                >
                  {day.label}
                </div>
              );
            })
          }
          {
            weekGrid.map((day) => (
              <div
                class={`week-cell ${!day.inRange ? "out-of-range" : ""} ${
                  day.isToday ? "today" : ""
                }`}
              >
                {day.dateNum}
              </div>
            ))
          }
        </div>
      </div>
      <div class="card-fan-display">
        <div
          class="card-fan"
          style="display: grid; grid-template-columns: repeat(13, 60px); gap: 0.5rem; justify-content: center; margin-top: 1rem;"
        >
          {
            fanCards.map((c, i) => {
              const isCurrent = startIdx + i === currentIndex;
              return (
                <div class={`card ${isCurrent ? "current" : ""}`}>
                  <div class="card-corner">
                    <div class="card-rank">{c.rank}</div>
                    <div class={`card-suit-symbol ${c.suit?.toLowerCase()}`}>
                      {c.suitSymbol}
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </main>

    <script is:inline>
      function updateClock() {
        const now = new Date();
        const h = String(now.getHours()).padStart(2, "0");
        const m = String(now.getMinutes()).padStart(2, "0");
        const timeEl = document.getElementById("time");
        if (timeEl) {
          timeEl.textContent = h + ":" + m;
        }
      }
      updateClock();
      setInterval(updateClock, 10_000);
    </script>
  </body>
</html>
